From 97d708a7e63e2dc6fb4303a1fbcdf672e7ec2339 Mon Sep 17 00:00:00 2001
From: Juri Lelli <juri.lelli@arm.com>
Date: Thu, 25 Jun 2015 14:12:33 +0100
Subject: [PATCH 103/110] sched/fair: jump to max OPP when crossing UP
 threshold

Since the true utilization of a long running task is not detectable while
it is running and might be bigger than the current cpu capacity, create the
maximum cpu capacity head room by requesting the maximum cpu capacity once
the cpu usage plus the capacity margin exceeds the current capacity. This
is also done to try to harm the performance of a task the least.

cc: Ingo Molnar <mingo@redhat.com>
cc: Peter Zijlstra <peterz@infradead.org>
Signed-off-by: Juri Lelli <juri.lelli@arm.com>
---
 kernel/sched/fair.c | 19 +++++++++++++++++++
 1 file changed, 19 insertions(+)

diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index 6f63a42..a554116 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -4134,6 +4134,7 @@ static bool cpu_overutilized(int cpu);
  * increases.
  */
 static unsigned int capacity_margin = 1280;
+#define capacity_max SCHED_CAPACITY_SCALE
 static unsigned long capacity_orig_of(int cpu);
 static unsigned long cpu_util(int cpu);
 
@@ -8418,6 +8419,24 @@ static void task_tick_fair(struct rq *rq, struct task_struct *curr, int queued)
 
 	if (!rq->rd->overutilized && cpu_overutilized(task_cpu(curr)))
 		rq->rd->overutilized = true;
+
+	/*
+	 * To make free room for a task that is building up its "real"
+	 * utilization and to harm its performance the least, request a
+	 * jump to max OPP as soon as get_cpu_usage() crosses the UP
+	 * threshold. The UP threshold is built relative to the current
+	 * capacity (OPP), by using capacity_margin.
+	 */
+	if (sched_energy_freq()) {
+		int cpu = cpu_of(rq);
+		unsigned long capacity_orig = capacity_orig_of(cpu);
+		unsigned long capacity_curr = capacity_curr_of(cpu);
+
+		if (capacity_curr < capacity_orig &&
+		    (capacity_curr * SCHED_LOAD_SCALE) <
+		    (cpu_util(cpu) * capacity_margin))
+			cpufreq_sched_set_cap(cpu, capacity_max);
+	}
 }
 
 /*
-- 
1.9.1

